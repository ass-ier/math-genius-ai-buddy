
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Brain, Clock, Star } from "lucide-react";

interface AssessmentModalProps {
  isOpen: boolean;
  onClose: () => void;
}

interface Question {
  id: string;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  difficulty: number;
  topic: string;
}

export const AssessmentModal = ({ isOpen, onClose }: AssessmentModalProps) => {
  const [step, setStep] = useState<'setup' | 'questions' | 'results'>('setup');
  const [selectedDifficulty, setSelectedDifficulty] = useState<string>('2');
  const [selectedTopic, setSelectedTopic] = useState<string>('algebra');
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);
  const [score, setScore] = useState(0);

  // Sample questions (in real app, these would be generated by AI)
  const sampleQuestions: Question[] = [
    {
      id: '1',
      question: 'Solve for x: 2x + 5 = 13',
      options: ['x = 3', 'x = 4', 'x = 5', 'x = 6'],
      correctAnswer: 1,
      explanation: 'Subtract 5 from both sides: 2x = 8, then divide by 2: x = 4',
      difficulty: 2,
      topic: 'algebra'
    },
    {
      id: '2',
      question: 'What is the area of a circle with radius 3?',
      options: ['6π', '9π', '12π', '18π'],
      correctAnswer: 1,
      explanation: 'Area = πr² = π(3)² = 9π',
      difficulty: 2,
      topic: 'geometry'
    },
    {
      id: '3',
      question: 'Simplify: (x + 2)(x - 3)',
      options: ['x² - x - 6', 'x² + x - 6', 'x² - x + 6', 'x² + x + 6'],
      correctAnswer: 0,
      explanation: 'Use FOIL: x² - 3x + 2x - 6 = x² - x - 6',
      difficulty: 2,
      topic: 'algebra'
    }
  ];

  const handleStartAssessment = () => {
    setStep('questions');
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setScore(0);
  };

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNextQuestion = () => {
    if (currentQuestion < sampleQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // Calculate score
      let correctCount = 0;
      sampleQuestions.forEach((question, index) => {
        if (selectedAnswers[index] === question.correctAnswer) {
          correctCount++;
        }
      });
      setScore(Math.round((correctCount / sampleQuestions.length) * 100));
      setStep('results');
    }
  };

  const handleRestart = () => {
    setStep('setup');
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setScore(0);
  };

  const renderSetup = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-3">Choose Difficulty Level</h3>
        <RadioGroup value={selectedDifficulty} onValueChange={setSelectedDifficulty}>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="1" id="diff1" />
            <Label htmlFor="diff1" className="flex items-center gap-2">
              <Star className="h-4 w-4" />
              Beginner - Basic concepts and simple problems
            </Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="2" id="diff2" />
            <Label htmlFor="diff2" className="flex items-center gap-2">
              <Star className="h-4 w-4" />
              <Star className="h-4 w-4" />
              Intermediate - Moderate complexity
            </Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="3" id="diff3" />
            <Label htmlFor="diff3" className="flex items-center gap-2">
              <Star className="h-4 w-4" />
              <Star className="h-4 w-4" />
              <Star className="h-4 w-4" />
              Advanced - Complex problems
            </Label>
          </div>
        </RadioGroup>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-3">Choose Topic Focus</h3>
        <RadioGroup value={selectedTopic} onValueChange={setSelectedTopic}>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="mixed" id="mixed" />
            <Label htmlFor="mixed">Mixed Topics</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="algebra" id="algebra" />
            <Label htmlFor="algebra">Algebra</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="geometry" id="geometry" />
            <Label htmlFor="geometry">Geometry</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="calculus" id="calculus" />
            <Label htmlFor="calculus">Calculus</Label>
          </div>
        </RadioGroup>
      </div>

      <div className="bg-blue-50 p-4 rounded-lg">
        <div className="flex items-center gap-2 mb-2">
          <Clock className="h-5 w-5 text-blue-600" />
          <span className="font-medium text-blue-900">Assessment Info</span>
        </div>
        <p className="text-blue-700 text-sm">
          This assessment contains 3 questions and takes about 5-10 minutes to complete. 
          You'll receive detailed explanations and personalized recommendations.
        </p>
      </div>

      <Button onClick={handleStartAssessment} className="w-full" size="lg">
        Start Assessment
      </Button>
    </div>
  );

  const renderQuestion = () => {
    const question = sampleQuestions[currentQuestion];
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <Badge variant="outline">
            Question {currentQuestion + 1} of {sampleQuestions.length}
          </Badge>
          <Badge>
            {question.topic.charAt(0).toUpperCase() + question.topic.slice(1)}
          </Badge>
        </div>

        <div>
          <h3 className="text-lg font-semibold mb-4">{question.question}</h3>
          <RadioGroup 
            value={selectedAnswers[currentQuestion]?.toString() || ""} 
            onValueChange={(value) => handleAnswerSelect(parseInt(value))}
          >
            {question.options.map((option, index) => (
              <div key={index} className="flex items-center space-x-2">
                <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                <Label htmlFor={`option-${index}`} className="text-base">
                  {option}
                </Label>
              </div>
            ))}
          </RadioGroup>
        </div>

        <Button 
          onClick={handleNextQuestion} 
          disabled={selectedAnswers[currentQuestion] === undefined}
          className="w-full"
        >
          {currentQuestion < sampleQuestions.length - 1 ? 'Next Question' : 'Finish Assessment'}
        </Button>
      </div>
    );
  };

  const renderResults = () => (
    <div className="space-y-6 text-center">
      <div>
        <h3 className="text-2xl font-bold mb-2">Assessment Complete!</h3>
        <div className="text-6xl font-bold text-blue-600 mb-2">{score}%</div>
        <p className="text-gray-600">
          You got {selectedAnswers.filter((answer, index) => answer === sampleQuestions[index].correctAnswer).length} out of {sampleQuestions.length} questions correct
        </p>
      </div>

      <div className="bg-gray-50 p-4 rounded-lg text-left">
        <h4 className="font-semibold mb-3">Question Review:</h4>
        {sampleQuestions.map((question, index) => (
          <div key={question.id} className="mb-3 pb-3 border-b border-gray-200 last:border-b-0">
            <div className="flex items-start justify-between mb-1">
              <span className="text-sm font-medium">Q{index + 1}: {question.question}</span>
              {selectedAnswers[index] === question.correctAnswer ? (
                <Badge className="bg-green-100 text-green-800">Correct</Badge>
              ) : (
                <Badge variant="destructive">Incorrect</Badge>
              )}
            </div>
            <p className="text-xs text-gray-600 mt-1">{question.explanation}</p>
          </div>
        ))}
      </div>

      <div className="flex gap-3">
        <Button onClick={handleRestart} variant="outline" className="flex-1">
          Take Another Assessment
        </Button>
        <Button onClick={onClose} className="flex-1">
          Continue Learning
        </Button>
      </div>
    </div>
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Brain className="h-6 w-6 text-blue-500" />
            AI-Generated Math Assessment
          </DialogTitle>
        </DialogHeader>
        
        {step === 'setup' && renderSetup()}
        {step === 'questions' && renderQuestion()}
        {step === 'results' && renderResults()}
      </DialogContent>
    </Dialog>
  );
};
